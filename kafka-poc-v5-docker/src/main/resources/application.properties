# Configuracao do servidor Kafka para conectar a aplicacao
# O valor e parametrizado com uma variavel de ambiente, com fallback para localhost:9092
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Configuracao do consumidor Kafka
# group-id define o identificador do grupo de consumidores.
# Todos os consumidores com o mesmo group-id irao compartilhar a leitura das particoes do topico.
spring.kafka.consumer.group-id=test-group

# Auto offset reset e uma configuracao que define o comportamento do consumidor 
# quando ele nao encontra um offset valido para consumir. O valor "earliest" indica que
# o consumidor comeca a ler a partir do primeiro registro disponivel.
spring.kafka.consumer.auto-offset-reset=earliest

# Configuracao de serializacao para o produtor Kafka
# O produtor envia chaves e valores para o Kafka, e essas configuracoes indicam que tanto 
# as chaves quanto os valores serao serializados como Strings.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Configuracao de desserializacao para o consumidor Kafka
# O consumidor le as mensagens do Kafka e desserializa as chaves e valores como Strings.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configuracao de propriedades para o consumidor Kafka
# Define o tempo limite para a sessao do consumidor. Caso o consumidor nao consiga
# manter a conexao dentro deste tempo, ele sera considerado inativo e podera ser removido.
spring.kafka.consumer.properties.session.timeout.ms=30000

# Define o tempo maximo que o consumidor pode esperar por uma solicitacao antes de um timeout.
spring.kafka.consumer.properties.request.timeout.ms=40000

# Define o intervalo maximo entre chamadas de polling. O Kafka espera por novas mensagens
# dentro deste tempo. Se o intervalo for excedido, o consumidor sera considerado inativo.
spring.kafka.consumer.properties.max.poll.interval.ms=300000

# Tempo de espera entre tentativas de reenvio em caso de erro. Se uma solicitacao falhar,
# o Kafka tentara novamente apos esse tempo.
spring.kafka.consumer.properties.retry.backoff.ms=1000
