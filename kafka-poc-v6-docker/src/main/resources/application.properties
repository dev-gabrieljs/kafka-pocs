# Configuracao do Kafka
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
# Define o endereco do servidor Kafka. Pode usar a variavel de ambiente SPRING_KAFKA_BOOTSTRAP_SERVERS ou, caso nao esteja definida, 'localhost:9092'

spring.kafka.consumer.group-id=test-group
# Define o ID do grupo de consumidores. Usado para identificar o grupo de consumidores que ira ler os topicos no Kafka.

spring.kafka.consumer.auto-offset-reset=earliest
# Define a politica de leitura do consumidor. 'earliest' significa que o consumidor vai começar a ler a partir do primeiro offset disponivel, caso nao haja um offset armazenado para o consumidor.

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Define o serializador para a chave das mensagens enviadas para o Kafka. Aqui, estamos utilizando um serializador de string.

spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Define o serializador para o valor das mensagens enviadas para o Kafka. Aqui, também usamos um serializador de string.

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Define o desserializador para a chave das mensagens recebidas pelo consumidor. Aqui, estamos utilizando o desserializador de string.

spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Define o desserializador para o valor das mensagens recebidas pelo consumidor. Aqui, também usamos o desserializador de string.

spring.kafka.consumer.properties.session.timeout.ms=30000
# Define o tempo de espera (em milissegundos) antes que o Kafka considere o consumidor inativo. O valor '30000' é 30 segundos.

spring.kafka.consumer.properties.request.timeout.ms=40000
# Define o tempo máximo (em milissegundos) para esperar por uma resposta de uma solicitação de consumidor antes de falhar. O valor '40000' é 40 segundos.

spring.kafka.consumer.properties.max.poll.interval.ms=300000
# Define o tempo máximo (em milissegundos) entre duas chamadas de poll() para o consumidor. O valor '300000' é 5 minutos.

spring.kafka.consumer.properties.retry.backoff.ms=1000
# Define o tempo de espera (em milissegundos) entre tentativas de reenvio de uma mensagem em caso de falha. O valor '1000' é 1 segundo.

# Configuracao do MongoDB
spring.data.mongodb.uri=mongodb://root:rootpassword@mongodb:27017/kafka_db?authSource=admin
# Define a URI de conexao com o MongoDB. Aqui, estamos usando as credenciais 'root:rootpassword' e acessando o banco 'kafka_db'.

spring.data.mongodb.replica-set=rs0
# Define o nome do conjunto de replicas para o MongoDB. Neste caso, estamos usando 'rs0', que e o nome padrao do replica set no MongoDB.
