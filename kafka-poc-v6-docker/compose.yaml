services:
  broker:
    # Configuração do container Kafka
    image: apache/kafka:latest  # Usa a imagem oficial do Kafka
    container_name: broker  # Nome do container Kafka
    ports:
      - 9092:9092  # Mapeia a porta 9092 do container Kafka para a porta 9092 do host

    environment:
      KAFKA_NODE_ID: 1  # Define o ID único para o nó Kafka no cluster
      KAFKA_PROCESS_ROLES: broker,controller  # Este Kafka irá atuar como broker e também como controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      # O Kafka escuta na porta 9092 para conexões de dados e na 9093 para comunicação do controller
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092  # IMPORTANTE: 'broker' é o nome do serviço no Docker Compose
      # Isso garante que outros containers, como a aplicação Spring Boot, se conectem usando o nome 'broker' e a porta 9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER  # Nome do listener usado para comunicação do controller
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Especifica que o protocolo PLAINTEXT será usado tanto para dados quanto para o controller
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT  # O protocolo utilizado é PLAINTEXT (sem criptografia)
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      # Define o quorum para o controller (usando a porta 9093)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Número de réplicas para o tópico de offsets
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1  # Número de réplicas para o log de transações
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1  # Número mínimo de réplicas que deve estar disponível para o log de transações
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # Atraso em milissegundos para o rebalanceamento inicial de grupos de consumidores
      KAFKA_NUM_PARTITIONS: 1  # Número de partições padrão para novos tópicos Kafka

  mongo:
    # Configuração do container MongoDB
    image: mongo:latest  # Usa a imagem oficial do MongoDB
    container_name: mongodb  # Nome do container MongoDB
    ports:
      - 27017:27017  # Mapeia a porta 27017 do container MongoDB para a porta 27017 do host
    environment:
      - 'MONGO_INITDB_DATABASE=kafka_db'        # Nome do banco de dados que será criado ao iniciar o MongoDB
      - 'MONGO_INITDB_ROOT_USERNAME=root'         # Nome de usuário para o acesso root ao MongoDB
      - 'MONGO_INITDB_ROOT_PASSWORD=rootpassword' # Senha para o usuário root do MongoDB
    volumes:
      - ./data/db:/data/db  # Monta um volume persistente para armazenar os dados do MongoDB localmente

  mongo-express:
    # Interface web para administrar o MongoDB
    image: mongo-express  # Usa a imagem oficial do Mongo Express (interface web)
    container_name: mongo-express  # Nome do container do Mongo Express
    restart: always  # Reinicia o container automaticamente se ele falhar
    ports:
      - 8081:8081  # Mapeia a porta 8081 do container para a porta 8081 do host (acesso à interface web)
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root          # Nome do usuário admin para o MongoDB
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword  # Senha do usuário admin para o MongoDB
      ME_CONFIG_MONGODB_URL: mongodb://root:rootpassword@mongodb:27017/kafka_db?authSource=admin
      # URL de conexão do MongoDB, incluindo usuário, senha e nome do banco
      ME_CONFIG_BASICAUTH: false  # Desativa a autenticação básica na interface web

  app:
    # Configuração da aplicação Spring Boot
    build: .  # Indica que o Dockerfile da aplicação está no diretório atual
    container_name: spring-app  # Nome do container da aplicação
    ports:
      - "8080:8080"  # Mapeia a porta 8080 do container para a porta 8080 do host (acesso à aplicação Spring Boot)

    command: ["./wait-for-it.sh", "mongodb:27017", "--", "java", "-jar", "/app.jar"]
    # O script 'wait-for-it.sh' aguarda o MongoDB ficar disponível na porta 27017 antes de iniciar a aplicação Spring Boot.
    # Esse comando garante que o Spring só iniciará quando o MongoDB estiver pronto para conexão.

    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:9092  # Endereço do broker Kafka para o Spring Boot se conectar
      SPRING_DATA_MONGODB_URI: mongodb://root:rootpassword@mongodb:27017/kafka_db?authSource=admin
      # URL de conexão do MongoDB para a aplicação Spring Boot acessar o banco de dados

    depends_on:
      - broker  # O serviço 'app' depende do serviço 'broker' (Kafka) estar disponível
      - mongo   # O serviço 'app' também depende do serviço 'mongo' (MongoDB) estar disponível
